{
  "filename": "doc2.md",
  "__html": "<h3>jpa-plus</h3>\n<p>关于jpa功能增强的开源项目，在github上可以找到几个，比如：<a href=\"https://github.com/slyak/spring-data-jpa-extra\">spring-data-jpa-extra</a>、<a href=\"https://github.com/wenhao/jpa-spec\">jpa-spec</a>、<a href=\"https://github.com/fast-family/spring-data-jpa-expansion\">spring-data-jpa-expansion</a>。</p>\n<p>我原本拿<code>spring-data-jpa-extra</code>魔改了一番，但是后来觉得封装过于复杂，不够简单高效，弃用了。</p>\n<p>然后想按照<code>myBatis-plus</code>的<code>QueryWrapper</code>和<code>UpdateWrapper</code>自己封装出来jpa版本，封装<code>QueryWrapper</code>很容易想到可以使用jpa的<code>Specification</code>实现。但是，想实现<code>UpdateWrapper</code>的效果就有点儿...。封装<code>QueryWrapper</code>块的时候遇到点儿问题，在查百度时看到了<code>jpa-spec</code>这个项目。此时，我也差不多封装完了、绝不放弃。顺利写完我的版本(更接近<code>myBatis-plus</code>的<code>QueryWrapper</code>的写法)。后来觉得联查功能不够强大，并且必须在实体类中加响应的注解(orm...我不喜欢)，总之还是不够简单高效，又弃用了。</p>\n<p>经过查资料多次尝试，发现NativeSql查询很好很强大，实现ResultTransformer可以定制查询结果转化到任意pojo，应该可以封装出我想要的<code>简单高效</code>的效果，于是又一次的努力，有了<code>jpa-plus</code>。目前，只封装了查询功能。更新功能还没封装。</p>\n<h3>小知识</h3>\n<p><strong>实体类</strong></p>\n<p>实体类 顶层父类是<code>Model</code>提供了ActiveRecord的模式,支持 ActiveRecord 形式调用,实体类只需继承 Model 类即可实现基本 CRUD 操作;\n实体类的 直接父类 可以是<code>BaseEntity</code>或<code>BaseEntity</code>的子类<code>AuditableEntity</code>;</p>\n<p><code>BaseEntity</code>中有一个<code>Map&lt;String, Object&gt; params</code>，前端传数据字段多于实体类属性、不想在实体类加相应的属性时(请看下面例子)。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 实体类属性: createTime 创建时间</span>\n<span class=\"hljs-comment\">// 需要范围查询</span>\n<span class=\"hljs-comment\">// 添加响应属性方式： createTimeBegin、createTimeEnd ==&gt; 调用接口传入 createTimeBegin=\"2049-01-01\",createTimeBegin=\"2049-12-12\"</span>\n<span class=\"hljs-comment\">// 放入Map方式：  调用接口传入 params['createTime']=[\"2049-01-01\",\"2049-12-12\"]</span>\n<span class=\"hljs-comment\">// 使用方式：     实体类对象.getParams(\"createTime\"); //创建起止时间的数组</span>\n</code></pre>\n<p><code>AuditableEntity</code> 中定义了后台管理常用到的审计字段 <code>createTime``createBy</code> <code>updateTime</code> <code>updateBy</code>, 需要这些字段的实体类应该继承<code>AuditableEntity</code>,对应的表中也要有字段 <code>create_time``create_by</code> <code>update_time</code> <code>update_by</code>;\n<strong>写代码</strong>时，<strong>不用关心</strong>这四个字段有没有值,框架会自动赋值;</p>\n<p>实体类的 类名称和属性 与 数据库表名称和字段名称 是<code>驼峰转下划线连接的小写形式</code>的关系;\n如果表名称有实体类不具备的前缀(比如,表名称<code>t_job_log</code>,实体类名称<code>JobLog</code>),需要在实体类注解@Entity中明确赋值name(<code>@Entity(name = &quot;t_job_log&quot;)</code>);</p>\n<p>实体类上的 表别名注解 <code>@TableAlias(&quot;表别名&quot;)</code>, <strong>每个实体类都应该加上此注解</strong>, 注解的value值应该与NativeSqlQuery中的表别名一致。<code>数据范围过滤</code>动态生成的sql片段会插入到sql模板中;</p>\n<p>例子:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Data</span> <span class=\"hljs-meta\">@Builder</span>(toBuilder = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-meta\">@AllArgsConstructor</span> <span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@EqualsAndHashCode</span>(callSuper = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-meta\">@Entity</span> <span class=\"hljs-meta\">@TableAlias</span>(<span class=\"hljs-string\">\"su\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SysUser</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AuditableEntity</span>&lt;<span class=\"hljs-title\">SysUser</span>,<span class=\"hljs-title\">Long</span>&gt;</span>{\n    <span class=\"hljs-comment\">// 上面几个注解是 lombok 的, 如果不知道 lombok 请上Google百度一下</span>\n    \n    <span class=\"hljs-comment\">// 属性 略...</span>\n}\n</code></pre>\n<p><strong>Dao</strong></p>\n<p>Dao层需要 继承 BaseRepository</p>\n<p>例子:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Repository</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SysOrgRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseRepository</span>&lt;<span class=\"hljs-title\">SysOrg</span>,<span class=\"hljs-title\">Long</span>&gt; </span>{}\n</code></pre>\n<p><strong>Service</strong></p>\n<p>Service 接口需要 继承 IBaseService, 实现类 需要继承 BaseServiceImpl 并实现 对应的接口</p>\n<p>例子:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 接口</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ISysOrgService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">IBaseService</span>&lt;<span class=\"hljs-title\">SysOrg</span>,<span class=\"hljs-title\">Long</span>&gt; </span>{}\n\n<span class=\"hljs-comment\">// 实现类</span>\n<span class=\"hljs-meta\">@Slf</span>4j <span class=\"hljs-meta\">@Service</span> <span class=\"hljs-meta\">@Transactional</span>(readOnly = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SysOrgServiceImpl</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseServiceImpl</span>&lt;<span class=\"hljs-title\">SysOrgRepository</span>, <span class=\"hljs-title\">SysOrg</span>,<span class=\"hljs-title\">Long</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ISysOrgService</span> </span>{\n\n    <span class=\"hljs-comment\">// 在BaseServiceImpl中注入了 EntityManager //Service实现类的方法中可以直接使用;</span>\n    \n    <span class=\"hljs-comment\">// 在BaseServiceImpl中注入了 dao //泛型依赖会自动传递下来,Service实现类的方法中可以直接使用 dao.xxx(yyy);</span>\n}\n</code></pre>\n<hr>\n<h3>jpa-plus使用说明</h3>\n<pre><code>像原生sql一样简单,像原生sql一样复杂\n</code></pre>\n<p>sevice层的方法中</p>\n<pre><code class=\"language-java\">NativeSqlQuery nativeSql = NativeSqlQuery.builder()\n    .select(查询的列) <span class=\"hljs-comment\">//必有</span>\n    .from(表名 AS 表别名 LEFT JOIN 表名 AS 表别名 ON XXX = YYY) <span class=\"hljs-comment\">//必有</span>\n    <span class=\"hljs-comment\">// where 条件， eq/ne/lt/...可以出现0～n次，生成SQL时 默认用 AND 连接多个where条件</span>\n    <span class=\"hljs-comment\">// 自动判断属性不为null，才会生成对应sql片段</span>\n    .eq(表别名.列名, java属性值/常量值)\n    .ne(表别名.列名, java属性值/常量值)\n    .lt(表别名.列名, java属性值/常量值)\n    .lte(表别名.列名, java属性值/常量值)\n    .gt(表别名.列名, java属性值/常量值)\n    .gte(表别名.列名, java属性值/常量值)\n    .isNull(表别名.列名) <span class=\"hljs-comment\">// 不需要传值</span>\n    .isNotNull(表别名.列名) <span class=\"hljs-comment\">// 不需要传值</span>\n    .startsWith(表别名.列名, java属性值/常量值)\n    .contains(表别名.列名, java属性值/常量值)\n    .endsWith(表别名.列名, java属性值/常量值)\n    .notStartsWith(表别名.列名, java属性值/常量值)\n    .notContains(表别名.列名, java属性值/常量值)\n    .notEndsWith(表别名.列名, java属性值/常量值)\n    .in(表别名.列名, java属性值/常量值)         <span class=\"hljs-comment\">// 传入Array或List</span>\n    .notIn(表别名.列名, java属性值/常量值)      <span class=\"hljs-comment\">// 传入Array或List</span>\n    .between(表别名.列名, java属性值/常量值)    <span class=\"hljs-comment\">// 传入Array或List, 长度应该是2</span>\n    .notBetween(表别名.列名, java属性值/常量值) <span class=\"hljs-comment\">// 传入Array或List, 长度应该是2</span>\n    .sqlStrPart(自定义sql字符串片段) <span class=\"hljs-comment\">//追加到where条件尾部(数据权限sql片段)</span>\n    <span class=\"hljs-comment\">// 以下这些 也是可有可无，跟原生sql写法别无二致</span>\n    .groupBy(表别名.列名)\n    .having(表别名.列名 操作符 值 [AND/OR] [表别名.列名 操作符 值])\n    .orderBy(表别名.列名 ASC[,表别名.列名 DESC])\n    <span class=\"hljs-comment\">// build可以不写, 照顾用习惯lombok的人(不build一下,可能浑身不自在)</span>\n    .build();\n\n    <span class=\"hljs-comment\">// nativeSql</span>\n    <span class=\"hljs-comment\">// pojo.class  普通的java类即可，列名(下划线连接==自动转换==&gt;驼峰命名，去匹配java类的属性)</span>\n    <span class=\"hljs-comment\">// pageRequest 需要分页,可传入. pageRequest对象中有排序的Sort数据会无视(请用orderBy()排序)</span>\n    <span class=\"hljs-comment\">// 返回List&lt;pojo&gt;或Page&lt;pojo&gt;</span>\n    dao.findAllByNativeSql(nativeSql, JobLog.class, pageRequest);\n</code></pre>\n<h3>jpa-plus用法示例</h3>\n<p>sevice层的方法中</p>\n<pre><code class=\"language-java\"> \n    <span class=\"hljs-comment\">// 像原生sql一样简单. 也可以原生sql一样写到很复杂</span>\n    \n    Object createTime = jobLog.getParams(<span class=\"hljs-string\">\"createTime\"</span>); <span class=\"hljs-comment\">//传进来是创建起止时间的数组</span>\n\n    NativeSqlQuery nativeSql = NativeSqlQuery.builder()\n        .select(<span class=\"hljs-string\">\"tjl.*\"</span>)\n        .from(<span class=\"hljs-string\">\"t_job_log tjl\"</span>)\n        .eq(<span class=\"hljs-string\">\"tjl.bean_name\"</span>, jobLog.getBeanName())\n        .eq(<span class=\"hljs-string\">\"tjl.method_name\"</span>, jobLog.getMethodName())\n        .contains(<span class=\"hljs-string\">\"tjl.parameter\"</span>, jobLog.getParameter())\n        .eq(<span class=\"hljs-string\">\"tjl.status\"</span>, jobLog.getStatus())\n        .between(<span class=\"hljs-string\">\"date_format(tjl.create_time,'%Y-%m-%d')\"</span>, createTime)\n        .orderBy(<span class=\"hljs-string\">\"tjl.id\"</span>)\n        .build();\n\n    <span class=\"hljs-keyword\">return</span> dao.findAllByNativeSql(nativeSql, JobLog.class, pageRequest);\n    \n</code></pre>\n<hr>\n<p>其他简化jpa开发的工具类</p>\n<p><strong>QueryRequest</strong></p>\n<p>查询请求,很多时候需要 分页参数、排序参数, Controller层方法的形参写上<code>QueryRequest</code>, 自动接收分页和排序参数;\n查询需要PageRequest对象,只需要调用一下<code>getPageRequest()</code>, 查询需要Sort对象,只需要调用一下<code>getSort()</code>;\n调用getPageRequest()时, 分页参数有默认备用值<code>pageNo</code>=0,<code>pageSize</code>=20;\n排序字段可以设置默认备用值<code>QueryRequest#setDefaultSortField(&quot;默认排序属性名称&quot;, 是否升序)</code>;</p>\n<p>Service代码片段示例:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 如果没接收到分页参数, 有默认备用值`pageNo`=0,`pageSize`=20;</span>\nPageRequest pageRequest = queryRequest.getPageRequest();\n\n<span class=\"hljs-comment\">//  如果没接收到排序参数, setDefaultSortField设置的默认值 生效</span>\nPageRequest pageRequest = queryRequest.setDefaultSortField(<span class=\"hljs-string\">\"createTime\"</span>, <span class=\"hljs-keyword\">false</span>).getPageRequest();\n\ndao.findAll(pageRequest);\n\n<span class=\"hljs-comment\">// 虽然使用 QueryRequest 接收 参数了, 但是只需要排序 不需要分页</span>\nSort sort = queryRequest.setDefaultSortField(<span class=\"hljs-string\">\"createTime\"</span>, <span class=\"hljs-keyword\">false</span>).getSort();\n\n<span class=\"hljs-comment\">// queryRequest.getSort(); // 当然 也可以 不设置 默认排序字段</span>\n\ndao.findAll(sort);\n</code></pre>\n<hr>\n<p><strong>PageUtil、SortUtil</strong></p>\n<p>查询需要排序或分页, 但是这些参数不是前端传过来的。JPA本来就是这方面的高手, 但是, 还能更优秀。\nPageUtil可以更简单构建多字段排序的PageRequest。</p>\n<p>代码片段示例:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 如果需要分页参数, PageUtil有默认备用值`pageNo`=0,`pageSize`=20;</span>\nPageRequest pageRequest = PageUtil.builder().pageNo(<span class=\"hljs-number\">0</span>).pageSize(<span class=\"hljs-number\">50</span>).asc(<span class=\"hljs-string\">\"age\"</span>).desc(<span class=\"hljs-string\">\"createTime\"</span>).build();\n\n<span class=\"hljs-comment\">// 如果只需要分页 不需要排序 // 应该用jpa 自带写法</span>\nPageRequest pageRequest = PageRequest.of(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">30</span>);\n\n<span class=\"hljs-comment\">// 如果只需要排序 不需要分页 // getSort();</span>\nSort sort = PageUtil.builder().asc(<span class=\"hljs-string\">\"age\"</span>).desc(<span class=\"hljs-string\">\"createTime\"</span>).build().getSort();\n\n<span class=\"hljs-comment\">// 如果只需要排序 不需要分页 // 也可以使用工具类 SortUtil</span>\nSort sort = SortUtil.builder().asc(<span class=\"hljs-string\">\"age\"</span>).desc(<span class=\"hljs-string\">\"createTime\"</span>).build();\n</code></pre>\n<hr>\n",
  "link": "/zh-cn/docs/doc2.html",
  "meta": {
    "title": "Dao框架",
    "keywords": "Freeman,jpa-plus",
    "description": "jpa-plus"
  }
}