{
  "filename": "JWT用户无感知刷新方案.md",
  "__html": "<h1>JWT用户无感知刷新方案</h1>\n<p>需求:\tJWT用户无感知刷新,多个携带过期JWT的请求几乎同时访问不能出错,活跃用户JWT防持续盗用,单端在线。</p>\n<h3>Redis单实例实现:</h3>\n<p>每次Http请求带着JWT来访问，服务端都要按如下步骤验证/刷新令牌。</p>\n<ol>\n<li>\n<p>先校验JWT是否合法(只是过期,不影响校验通过)  或 <strong>数据1</strong>是否存在, 不满足任一条件,返回401，让用户重新登录。</p>\n</li>\n<li>\n<p>判断<strong>数据2</strong>是否存在,存在就不需要继续验证了, <code>结束令牌校验，继续本次请求的业务逻辑</code>。</p>\n</li>\n<li>\n<p>验证令牌是否过期，<code>没过期</code>就<code>结束令牌校验，继续本次请求的业务逻辑</code>(此时,JWT合法性校验通过, <strong>数据1</strong>存在,不存在<strong>数据2</strong>)。</p>\n</li>\n<li>\n<p>令牌已过期,拿<code>旧令牌</code>(当前令牌),和<code>新令牌</code>(新生成的),调用lua脚本操作Redis刷新令牌</p>\n</li>\n<li>\n<p>原子操作lua逻辑:  根据用户ID获取<strong>数据1</strong>的值，与<code>旧令牌</code>一致 把值换成<code>新令牌</code> 存入redis ,  并且以<code>旧令牌</code>为KEY 保存<strong>数据2</strong>到redis, 返回 <code>SUCCESS</code>; 与<code>旧令牌</code>不一致(旧令牌没有刷新权限) 返回 <code>FAIL</code></p>\n</li>\n<li>\n<p>上一步 返回的结果是 <code>SUCCESS</code>,把<code>新令牌</code>放回http响应头中,并在http响应头中放入<code>isnewToken</code>标志着这是个新令牌</p>\n</li>\n</ol>\n<p>客户端统一拦截<code>请求</code>和<code>响应</code>, 每次发送请求之前,把本地保存的令牌放到请求头里, 每次收到响应, 判断有没有<code>isnewToken</code>, 如果有,就把响应头中的令牌保存到本地。</p>\n<p>redis数据结构 string</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">简称</th>\n<th style=\"text-align:left\">key</th>\n<th style=\"text-align:left\">value</th>\n<th style=\"text-align:left\">有效时长(秒)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">数据1</td>\n<td style=\"text-align:left\">用户ID</td>\n<td style=\"text-align:left\">令牌</td>\n<td style=\"text-align:left\">T1</td>\n<td>令牌可以无感知刷新的时长,比如：7天<code>60*60*24*7</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据2</td>\n<td style=\"text-align:left\">令牌</td>\n<td style=\"text-align:left\">用户ID</td>\n<td style=\"text-align:left\">T2</td>\n<td>平滑过渡时长,比如：30秒</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-java\">   <span class=\"hljs-comment\">/**\n     * 登录/JWT过期后尝试刷新\n     * <span class=\"hljs-doctag\">@param</span> key 用户ID\n     * <span class=\"hljs-doctag\">@param</span> oldJwt 旧JWT\n     * <span class=\"hljs-doctag\">@param</span> newJwt 新JWT\n     * <span class=\"hljs-doctag\">@return</span> SUCCESS:成功, FAIL:失败\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">tryRefreshToken</span><span class=\"hljs-params\">(String Key, String oldJwt, String newJwt)</span> </span>{\n        String luaScript =\n            <span class=\"hljs-string\">\"-- 根据key(用户ID）获取令牌 \\n\"</span> +\n            <span class=\"hljs-string\">\"local token = redis.call('get',KEYS[1])\\n\"</span> +\n            <span class=\"hljs-string\">\"-- 取到的token为空, 返回‘FAIL’ \\n\"</span> +\n            <span class=\"hljs-string\">\"if(not(tokens) or 0==#tokens) then return 'FAIL' end\\n\"</span> +\n            <span class=\"hljs-string\">\"-- 判断取到的token,是否与旧令牌一致 \\n\"</span> +\n            <span class=\"hljs-string\">\"-- 不一致,不能更新令牌 返回'FAIL' \\n\"</span> +\n            <span class=\"hljs-string\">\"if(token ~= ARGV[1]) then return 'FAIL' end\\n\"</span> +\n <span class=\"hljs-string\">\"redis.call('set',KEYS[1],ARGV[2],'XX','EX',604800) \\n\"</span> +\n            <span class=\"hljs-string\">\"-- 保存平滑过渡令牌\\n\"</span> +\n            <span class=\"hljs-string\">\"redis.call('set',ARGV[1],KEYS[1],'NX','EX',30) \\n\"</span> +\n            <span class=\"hljs-string\">\"return 'SUCCESS'\"</span>;\n\n        <span class=\"hljs-keyword\">return</span> jedis.eval(luaScript, <span class=\"hljs-number\">1</span>, key, oldJwt, newJwt));\n    }\n</code></pre>\n",
  "link": "/zh-cn/blog/JWT用户无感知刷新方案.html",
  "meta": {
    "title": "title",
    "keywords": "keywords1,keywords2,keywords3",
    "description": "some description"
  }
}